#!/usr/bin/python

from mininet.topo import Topo
from mininet.net import Mininet
from mininet.node import CPULimitedHost, OVSKernelSwitch, Controller, RemoteController
from mininet.link import TCLink
from mininet.util import dumpNodeConnections
from mininet.log import setLogLevel
from mininet.cli import CLI
import os

class QoSNetwork(Topo):
    def build(self):
        # Add switches
        s1 = self.addSwitch('s1')
        s2 = self.addSwitch('s2')
        s3 = self.addSwitch('s3')

        # Add hosts
        # High priority hosts
        h1 = self.addHost('h1')  # Video streaming server
        h2 = self.addHost('h2')  # Video client
        
        # Medium priority hosts
        h3 = self.addHost('h3')  # Web server
        h4 = self.addHost('h4')  # Web client
        
        # Low priority hosts
        h5 = self.addHost('h5')  # File server
        h6 = self.addHost('h6')  # File client

        # Add links with different QoS parameters
        # High priority links - low delay, high bandwidth
        self.addLink(h1, s1, cls=TCLink, bw=100, delay='1ms', loss=0)
        self.addLink(h2, s3, cls=TCLink, bw=100, delay='1ms', loss=0)
        
        # Medium priority links
        self.addLink(h3, s1, cls=TCLink, bw=50, delay='5ms', loss=1)
        self.addLink(h4, s3, cls=TCLink, bw=50, delay='5ms', loss=1)
        
        # Low priority links
        self.addLink(h5, s1, cls=TCLink, bw=10, delay='10ms', loss=2)
        self.addLink(h6, s3, cls=TCLink, bw=10, delay='10ms', loss=2)
        
        # Inter-switch links
        self.addLink(s1, s2, cls=TCLink, bw=200, delay='2ms')
        self.addLink(s1, s3, cls=TCLink, bw=200, delay='2ms')
        self.addLink(s2, s3, cls=TCLink, bw=200, delay='2ms')

def setup_network():
    # Create network
    topo = QoSNetwork()
    net = Mininet(
        topo=topo,
        controller=RemoteController('c0', ip='127.0.0.1', port=6633),
        switch=OVSKernelSwitch,
       # host=CPULimitedHost,
        link=TCLink,
        autoSetMacs=True,
        ipBase='10.0.0.0/8'
    )
    
    # Start network
    net.start()
    
    # Configure QoS rules on switches
    for switch in net.switches:
        # Enable OpenFlow 1.3
        os.system('ovs-vsctl set Bridge %s protocols=OpenFlow13' % switch.name)
        
        # Configure QoS queues
        os.system('ovs-vsctl -- set Port %s-eth1 qos=@newqos \
                  -- --id=@newqos create QoS type=linux-htb \
                  queues=0=@q0,1=@q1,2=@q2 \
                  -- --id=@q0 create Queue other-config:min-rate=100000 other-config:max-rate=1000000 \
                  -- --id=@q1 create Queue other-config:min-rate=500000 other-config:max-rate=5000000 \
                  -- --id=@q2 create Queue other-config:min-rate=1000000 other-config:max-rate=10000000' % switch.name)


    
    return net

def test_network(net):
    print("Dumping host connections")
    dumpNodeConnections(net.hosts)
    
    print("\nTesting network connectivity")
    net.pingAll()
    
    # Test bandwidth between hosts
   
    print("\nTesting bandwidth between h1 and h2 (high priority)")
    h1, h2 = net.get('h1','h2')
    h1.cmd('ifconfig h1-eth0 10.0.0.1 netmask 255.0.0.0')
    h2.cmd('ifconfig h2-eth0 10.0.0.2 netmask 255.0.0.0')
    print("Testing connectivity from h1 to h2:")
    print(h1.cmd('ping -c 1 10.0.0.2'))

    net.iperf(h1, h2)
    
    print("\nTesting bandwidth between h3 and h4 (medium priority)")
    h3, h4 = net.get('h3','h4')
    net.iperf(h3, h4)
    
    print("\nTesting bandwidth between h5 and h6 (low priority)")
    h5, h6 = net.get('h5','h6')
    net.iperf(h6, h6)

if __name__ == '__main__':
    setLogLevel('info')
    
    # Create and setup network
    net = setup_network()
    
    # Test network
    test_network(net)
    
    # Start CLI
    CLI(net)
    
    # Cleanup
    net.stop()
